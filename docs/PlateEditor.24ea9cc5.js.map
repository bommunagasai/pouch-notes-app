{"mappings":"oiBA8FAA,EAzEiB,EAAKC,MACpBA,EAAKC,SACLA,EAAQ,SAAWC,SACnBA,GAAW,EAAKC,OAChBA,EAAM,SAAWC,OACjBA,EAAM,SAAWC,SACjBA,EAAQ,SAAWC,GACnBA,MAEA,MAAOC,EAASC,GAAcC,EAAAC,SAASV,GACjCW,EAAa,KACjB,MAAMC,EAASC,EAAAC,oBACf,OAAMC,EAAAC,KACHC,EAAAC,KAAI,CACHC,QAASC,EAAAC,QAAQC,KACjBC,UAAU,sDAETC,EAAAC,aAAY,UACZZ,EAAAa,mBAAkB,CACjBC,KAAMd,EAAAe,cAAchB,EAAQC,EAAAgB,oBAC5BC,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,+BAEpBC,EAAAQ,cAAa,SAIbC,KAACA,EAAI,SAAWC,KAAEA,EAAI,UAAgBrB,EAAAC,qBAAuB,GAEpE,OAAMC,EAAAC,KAAAD,EAAAoB,SAAA,iBAEDC,EAAAC,QAAY,CACXC,OAAQL,EACRM,OAAQL,EACRhC,SAAUA,EACVC,OAAQA,EACRE,SAAUA,EACVD,OAAM,IAAQA,EAAOG,MAErBL,GAAQa,EAAAgB,IAAAhB,EAAAoB,SAAA,gBAWLxB,EAAa,YAGjBE,EAAA2B,MAAK,CACJlC,GAAIA,EACJmC,aAAczC,EACd0C,QAAS7B,EAAA8B,cAAcC,EAAAF,QAAS,CAC9BG,WAAYC,EAAAC,uBAAuBD,EAAAD,cAErCG,cAAe,UAAE9C,EAAU+C,WAAW,GACtChD,SAAWiD,IACT1C,EAAW0C,GACXjD,EAASiD,YAGZ,MAAG,gBACD,OAAI,UACFC,KAAKC,UAAU7C,EAAS,KAAM,0HClDzC,MAAM8C,EAA4B,CAChCC,MAAO,CAACzC,EAAAgB,mBAAoBhB,EAAA0C,iBAC5BC,YAAa3C,EAAA4C,mBA0DFC,GArDX7C,EAAA8C,sBAAsB,CACpBC,QAAS,CACPC,MAAO,CACL,IACKR,EACHS,OAAQ,QACRC,UAAWlD,EAAAmD,mBAEb,IACKX,EACHS,OAAQ,YACRC,UAAWlD,EAAAoD,6BAKnBpD,EAAAqD,sBAAsB,CACpBN,QAAS,CACPC,MAAO,CACL,CACEC,OAAQ,aAEV,CACEA,OAAQ,kBACRK,QAAQ,GAEV,CACEL,OAAQ,QACRM,MAAO,CACLC,OAAO,EACPC,KAAK,EACLC,MAAO,CAAC1D,EAAA2D,kBAMlB3D,EAAA4D,0BAA0B,CAAE9C,KAAMd,EAAA4C,oBAClC5C,EAAA6D,sBAAsB,CACpBd,QAAS,CACPC,MAAO,CACL,CAAEC,OAAQ,eACV,CACEA,OAAQ,QACRM,MAAO,CACLG,MAAO,CAAC1D,EAAA8D,mBAAoB9D,EAAAgB,mBAAoBhB,EAAA+D,kBAQrC,CACrB/D,EAAAgE,mBACAhE,EAAAiE,wBAGAjE,EAAAkE,mBAAmB,CACjBC,OAAQ,CACNC,MAAO,CACLC,WAAY,CACVrE,EAAA4C,kBACA5C,EAAAsE,WACAtE,EAAAuE,WACAvE,EAAAwE,WACAxE,EAAAyE,WACAzE,EAAA0E,WACA1E,EAAA2E,gBAKR3E,EAAA4E,yBACA5E,EAAA6E,mBACA7E,EAAA8E,qBACA9E,EAAA+E,wBACA/E,EAAAgF,4BACAhF,EAAAiF,mBACAjF,EAAAkF,yBACAlF,EAAAmF,6FChFK,MAAMC,EAAkB,CAC7B,CACEC,KAAM,OACNvE,KAAM,CAACd,EAAAsF,UAAWtF,EAAAuF,aAClBC,MAAO,OAET,CACEH,KAAM,OACNvE,KAAM,CAACd,EAAAyF,eAAgBzF,EAAAuF,aACvBC,MAAO,OAET,CACEH,KAAM,OACNvE,KAAM,CAACd,EAAAyF,eAAgBzF,EAAAsF,WACvBE,MAAO,QAET,CACEH,KAAM,OACNvE,KAAM,CAACd,EAAAyF,eAAgBzF,EAAAsF,UAAWtF,EAAAuF,aAClCC,MAAO,UAET,CACEH,KAAM,OACNvE,KAAMd,EAAAsF,UACNE,MAAO,MAET,CACEH,KAAM,OACNvE,KAAMd,EAAAyF,eACND,MAAO,MAET,CACEH,KAAM,OACNvE,KAAMd,EAAAuF,YACNC,MAAO,KAET,CACEH,KAAM,OACNvE,KAAMd,EAAAuF,YACNC,MAAO,KAET,CACEH,KAAM,OACNvE,KAAMd,EAAA0F,mBACNF,MAAO,MAET,CACEH,KAAM,OACNvE,KAAMd,EAAA2F,iBACNH,MAAO,KAET,CACEH,KAAM,OACNvE,KAAMd,EAAA4F,eACNJ,MAAO,KAET,CACEH,KAAM,OACNvE,KAAMd,EAAA6F,eACNL,MAAO,MAET,CACEH,KAAM,OACNvE,KAAMd,EAAA6F,eACNL,MAAO,KAET,CACEH,KAAM,OACNvE,KAAMd,EAAA8F,UACNN,MAAO,MAIEO,EAAoBhG,GAAWC,EAAAgG,WAAWjG,GAE1CkG,EAAM,CAAIlG,EAAQmG,KAC7B,GAAInG,EAAOoG,UAAW,CACpB,MAAMC,EAAcpG,EAAAqG,UAAUtG,EAAQA,EAAOoG,WAC7C,IAAKC,EAAa,OAClB,MAAOE,GAAQF,GAEbpG,EAAAuG,UAAUD,IACTtG,EAAAwG,OAAOzG,EAAQuG,EAAMtG,EAAA8D,qBACrB9D,EAAAwG,OAAOzG,EAAQuG,EAAMtG,EAAAyG,oBAEtBP,MAKOQ,EAAU,CAAI3G,EAAQ4G,KACjCV,EAAOlG,GAAM,IACXC,EAAA4G,WAAW7G,EAAQ,CACjBe,KAAM6F,OASCE,EAAkB,CAC7B,CACExB,KAAM,QACNvE,KAAMd,EAAA2D,WACN6B,MAAO,CAAC,KAAM,MACdsB,UAAWf,EACXgB,OAAShH,GAAW2G,EAAW3G,EAAQC,EAAAgH,aAEzC,CACE3B,KAAM,QACNvE,KAAMd,EAAA2D,WACN6B,MAAO,CAAC,MAAO,OACfsB,UAAWf,EACXgB,OAAShH,GAAW2G,EAAW3G,EAAQC,EAAAiH,aAEzC,CACE5B,KAAM,QACNvE,KAAMd,EAAA0C,gBACN8C,MAAO,OAET,CACEH,KAAM,QACNvE,KAAMd,EAAA0C,gBACN8C,MAAO,OACPuB,OAAShH,GACPC,EAAAkH,SACEnH,EACA,CAAEe,KAAMd,EAAA0C,gBAAiByE,SAAS,GAClC,CACE3B,MAAQ4B,GAAMC,EAAAC,OAAOC,QAAQxH,EAAQqH,OASrCpH,EAAAsE,WAMAtE,EAAAuE,WAMAvE,EAAAwE,WAMAxE,EAAAyE,WAMAzE,EAAA0E,WAMA1E,EAAA2E,WAMA3E,EAAAgB,mBAMAhB,EAAAwH,WAaAxH,EAAA8D,mBAiBL9D,EAAAyH,sBACAzH,EAAA0H,sBACA1H,EAAA2H,gBACA3H,EAAA4H,oBACA5H,EAAA6H,gBACA7H,EAAA8H,gMC3OE,MAAMC,EAA0B/F,GACrChC,EAAAgI,iBAAiBhG,EAAY,CAC3B,CACEiG,IAAKjI,EAAA4C,kBACLsF,YAAa,WACbC,YAAY,GAEd,CACEF,IAAKjI,EAAAsE,WACL4D,YAAa,WACbC,YAAY,KAILC,EAAa,EACvBpI,EAAAgB,oBAAqBhB,EAAAqI,UAAUrI,EAAAsI,kBAAmB,CACjDC,OAAQ,CACNC,KAAMC,EAAAC,GAAG;;;cAST9F,mBAAM5C,EAAAqI,UAAIrI,EAAA2I,cAAA,CACZC,GAAC,IACDL,OAAA,CACDC,KAAAC,EAAAC,GAAA,iBAECG,iBAAQ,SAENvE,YAAMtE,EAAAqI,UAAIrI,EAAA2I,cAAA,CAMZC,GAAC,KACFL,OAAA,CACAC,KAAAC,EAAAC,GAAA;;;;;cAaCnE,YAASvE,EAAAqI,UAAArI,EAAA2I,cAAA,IACP,KAOFJ,OAAC,CACFC,KAAAC,EAAAC,GAAA;;;;;cAcKlE,YAAIxE,EAAAqI,UAAArI,EAAA2I,cAAA,CACRC,GAAA,YACM,CAOLJ,KAAAC,EAAAC,GAAA;;;;;;YAeF1I,EAAAyE,YAASzE,EAAGqI,UAASrI,EAAC2I,cAAU,CAAIC,GAAI,KAAUL,OAAA,CAClDC,KAAAC,EAAAC,GAAA;;;;;;cAmBKhE,YAAM1E,EAAAqI,UAAArI,EAAA2I,cAAA,CACVC,GAAA,YACM,CAILJ,KAAAC,EAAAC,GAAA;;;;;;cAI2C/D,YAAG3E,EAAAqI,UAAArI,EAAA2I,cAAA,CAAEC,GAAA,KACpDL,OAAA;;;;;;;;;;;;;;;;;;;0VCtIM,MAAMO,EAAY,KACvB,MAAM/I,EAASC,EAAAC,oBACf,OAAMC,EAAAC,KAAAD,EAAAoB,SAAA,iBAEDtB,EAAA+I,kBAAiB,CAChBjI,KAAMd,EAAAe,cAAchB,EAAQC,EAAAsF,WAC5BrE,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,oBAEpBV,EAAA+I,kBAAiB,CAChBjI,KAAMd,EAAAe,cAAchB,EAAQC,EAAAuF,aAC5BtE,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,sBAEpBV,EAAA+I,kBAAiB,CAChBjI,KAAMd,EAAAe,cAAchB,EAAQC,EAAAyF,gBAC5BxE,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,yBAEpBV,EAAA+I,kBAAiB,CAChBjI,KAAMd,EAAAe,cAAchB,EAAQC,EAAA0F,oBAC5BzE,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,+BAEpBV,EAAA+I,kBAAiB,CAChBjI,KAAMd,EAAAe,cAAchB,EAAQC,EAAA6F,gBAC5B5E,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,yBAEpBV,EAAA+I,kBAAiB,CAChBjI,KAAMd,EAAAe,cAAchB,EAAQC,EAAA8F,WAC5B7E,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,yBAEpBV,EAAAgJ,kBAAiB,CAAC/H,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,kBA+D/BuI,EAAa,KACxB,MAAMlJ,EAASC,EAAAC,oBACf,OAAMC,EAAAC,KAAAD,EAAAoB,SAAA,iBAEDtB,EAAAkJ,cAAa,CACZC,YAAcC,IACZA,EAAEC,iBACFrJ,EAAAsJ,OAAOvJ,IAETkB,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,+BAEpBV,EAAAkJ,cAAa,CACZC,YAAcC,IACZA,EAAEC,iBACFrJ,EAAAuJ,YAAYxJ,IAEdkB,KAAIf,EAAAgB,IAAG,IAAC,CAACR,UAAU,6JCvF3B8I,EAzCkB,EAAKlK,OACrBA,EAAM,SAAWC,OACjBA,EAAM,SAAWF,SACjBA,GAAW,EAAKG,SAChBA,EAAQ,SAAWiC,OACnBA,EAAM,SAAWC,OACjBA,EAAM,YAEAxB,EAAAC,KACH,MAAG,CACFO,UAAS,qDAAuDrB,GAAY,wBAAwBkB,EAAAkJ,aAAa,CAC/GC,SAAUnJ,EAAAC,QAAQmJ,IAClBC,gBAAiBrJ,EAAAsJ,MAAMC,0BAGxB,OAAI,CAACpJ,UAAU,4BAA4BqJ,QAASzK,iBAClD,IAAC,CAACoB,UAAU,iCAEd,OAAI,UACDrB,QAaC,OAAI,CAACqB,UAAU,qBAAqBqJ,QAASvK,iBAC3C,IAAC,CAACkB,UAAU,qBAdPR,EAAAC,KAAAD,EAAAoB,SAAA,iBAEL,OAAI,CAACZ,UAAU,qBAAqBqJ,QAAStI,iBAC3C,IAAC,CAACf,UAAU,kCAEd,OAAI,CAACA,UAAU,qBAAqBqJ,QAASrI,iBAC3C,IAAC,CAAChB,UAAU,qCAEd,OAAI,CAACA,UAAU,qBAAqBqJ,QAASxK,iBAC3C,IAAC,CAACmB,UAAU","sources":["src/components/Editor/PlateEditor.js","src/components/Editor/plugins.js","src/components/Editor/autoformatRules.js","src/components/Editor/components.js","src/components/Editor/toolbars.js","src/components/Editor/EditorHeader.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  Plate,\r\n  createPlugins,\r\n  usePlateEditorRef,\r\n  getPluginType,\r\n  BlockToolbarButton,\r\n  ELEMENT_BLOCKQUOTE,\r\n  BalloonToolbar,\r\n} from '@udecode/plate'\r\n\r\nimport { plugins } from './plugins'\r\nimport { components, withStyledPlaceHolders } from './components'\r\n\r\nimport {\r\n  MarksToolbar,\r\n  IndentToolbar,\r\n} from './toolbars'\r\nimport { Card } from '@ds.crisp/react-components'\r\nimport { Spacing } from '@ds.crisp/foundation'\r\nimport EditorHeader from './EditorHeader'\r\nconst PlateEditor = ({\r\n  value,\r\n  onChange = () => {},\r\n  readOnly = false,\r\n  goBack = () => {},\r\n  onSave = () => {},\r\n  onUnlock = () => {},\r\n  id,\r\n}) => {\r\n  const [content, setContent] = useState(value)\r\n  const StaticToolbar = () => {\r\n    const editor = usePlateEditorRef()\r\n    return (\r\n      <Card\r\n        padding={Spacing.none}\r\n        className=\"d-flex flex-wrap pna-editor-toolbar\"\r\n      >\r\n        <MarksToolbar />\r\n        <BlockToolbarButton\r\n          type={getPluginType(editor, ELEMENT_BLOCKQUOTE)}\r\n          icon={<i className=\"ri-double-quotes-l\" />}\r\n        />\r\n        <IndentToolbar />\r\n      </Card>\r\n    )\r\n  }\r\n  const { undo = () => {}, redo = () => {} } = usePlateEditorRef() || {}\r\n\r\n  return (\r\n    <>\r\n      <EditorHeader\r\n        onUndo={undo}\r\n        onRedo={redo}\r\n        readOnly={readOnly}\r\n        goBack={goBack}\r\n        onUnlock={onUnlock}\r\n        onSave={() => onSave(content)}\r\n      />\r\n      {!readOnly && (\r\n        <>\r\n          {/* <BalloonToolbar\r\n            popperOptions={{\r\n              placement: 'top',\r\n            }}\r\n            theme={'light'}\r\n            arrow={false}\r\n          >\r\n            <MarksToolbar />\r\n          </BalloonToolbar> */}\r\n          <StaticToolbar />\r\n        </>\r\n      )}\r\n      <Plate\r\n        id={id}\r\n        initialValue={value}\r\n        plugins={createPlugins(plugins, {\r\n          components: withStyledPlaceHolders(components),\r\n        })}\r\n        editableProps={{ readOnly, autoFocus: true }}\r\n        onChange={(c) => {\r\n          setContent(c)\r\n          onChange(c)\r\n        }}\r\n      />\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(content, null, 4)}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PlateEditor\r\n","import {\r\n  createParagraphPlugin,\r\n  createHeadingPlugin,\r\n  createCodeBlockPlugin,\r\n  createCodePlugin,\r\n  createIndentPlugin,\r\n  createIndentListPlugin,\r\n  createBoldPlugin,\r\n  createItalicPlugin,\r\n  createUnderlinePlugin,\r\n  createStrikethroughPlugin,\r\n  createBlockquotePlugin,\r\n  createAutoformatPlugin,\r\n  createBlockquotePlugin,\r\n  ELEMENT_H1,\r\n  ELEMENT_H2,\r\n  ELEMENT_H3,\r\n  ELEMENT_H4,\r\n  ELEMENT_H5,\r\n  ELEMENT_H6,\r\n  ELEMENT_PARAGRAPH,\r\n  createHighlightPlugin,\r\n  createSoftBreakPlugin,\r\n  ELEMENT_BLOCKQUOTE,\r\n  ELEMENT_CODE_BLOCK,\r\n  ELEMENT_TD,\r\n  createExitBreakPlugin,\r\n  createTrailingBlockPlugin,\r\n  ELEMENT_LI,\r\n  ELEMENT_TODO_LI,\r\n  isBlockAboveEmpty,\r\n  isSelectionAtBlockStart,\r\n  createResetNodePlugin, \r\n  createLinkPlugin,\r\n} from '@udecode/plate'\r\n\r\nimport { autoformatRules } from './autoformatRules'\r\nconst resetBlockTypesCommonRule = {\r\n  types: [ELEMENT_BLOCKQUOTE, ELEMENT_TODO_LI],\r\n  defaultType: ELEMENT_PARAGRAPH,\r\n};\r\n\r\nexport const webSpecificPlugins = [\r\n\r\n  createResetNodePlugin({\r\n    options: {\r\n      rules: [\r\n        {\r\n          ...resetBlockTypesCommonRule,\r\n          hotkey: 'Enter',\r\n          predicate: isBlockAboveEmpty,\r\n        },\r\n        {\r\n          ...resetBlockTypesCommonRule,\r\n          hotkey: 'Backspace',\r\n          predicate: isSelectionAtBlockStart,\r\n        },\r\n      ],\r\n    },\r\n  },),\r\n  createExitBreakPlugin({\r\n    options: {\r\n      rules: [\r\n        {\r\n          hotkey: 'mod+enter',\r\n        },\r\n        {\r\n          hotkey: 'mod+shift+enter',\r\n          before: true,\r\n        },\r\n        {\r\n          hotkey: 'enter',\r\n          query: {\r\n            start: true,\r\n            end: true,\r\n            allow: [ELEMENT_LI],\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  }),\r\n  createTrailingBlockPlugin({ type: ELEMENT_PARAGRAPH }),\r\n  createSoftBreakPlugin({\r\n    options: {\r\n      rules: [\r\n        { hotkey: 'shift+enter' },\r\n        {\r\n          hotkey: 'enter',\r\n          query: {\r\n            allow: [ELEMENT_CODE_BLOCK, ELEMENT_BLOCKQUOTE, ELEMENT_TD],\r\n          },\r\n        },\r\n      ],\r\n    }\r\n  }),\r\n]\r\n\r\nexport const plugins = [\r\n  createLinkPlugin(),\r\n  createParagraphPlugin(),\r\n  // createHeadingPlugin(),\r\n  // createCodeBlockPlugin(),\r\n  createIndentPlugin({\r\n    inject: {\r\n      props: {\r\n        validTypes: [\r\n          ELEMENT_PARAGRAPH,\r\n          ELEMENT_H1,\r\n          ELEMENT_H2,\r\n          ELEMENT_H3,\r\n          ELEMENT_H4,\r\n          ELEMENT_H5,\r\n          ELEMENT_H6,\r\n        ],\r\n      },\r\n    },\r\n  }),\r\n  createIndentListPlugin(),\r\n  createBoldPlugin(),\r\n  createItalicPlugin(),\r\n  createUnderlinePlugin(),\r\n  createStrikethroughPlugin(),\r\n  createCodePlugin(),\r\n  createBlockquotePlugin(),\r\n  createHighlightPlugin(),\r\n  // createAutoformatPlugin({\r\n  //   options: {\r\n  //     rules: autoformatRules,\r\n  //   },\r\n  // }),\r\n]\r\n","import { Editor } from 'slate'\r\nimport {\r\n  ELEMENT_BLOCKQUOTE,\r\n  ELEMENT_CODE_BLOCK,\r\n  ELEMENT_DEFAULT,\r\n  ELEMENT_H1,\r\n  ELEMENT_H2,\r\n  ELEMENT_H3,\r\n  ELEMENT_H4,\r\n  ELEMENT_H5,\r\n  ELEMENT_H6,\r\n  ELEMENT_HR,\r\n  getPluginType,\r\n  insertEmptyCodeBlock,\r\n  insertNodes,\r\n  setNodes,\r\n  ELEMENT_LI,\r\n  ELEMENT_OL,\r\n  ELEMENT_TODO_LI,\r\n  ELEMENT_UL,\r\n  setNodes,\r\n  autoformatArrow,\r\n  autoformatSmartQuotes,\r\n  autoformatPunctuation,\r\n  autoformatLegal,\r\n  autoformatLegalHtml,\r\n  autoformatMath,\r\n  ELEMENT_CODE_BLOCK,\r\n  ELEMENT_CODE_LINE,\r\n  getParent,\r\n  isElement,\r\n  isType,\r\n  toggleList,\r\n  unwrapList,\r\n  MARK_BOLD,\r\n  MARK_CODE,\r\n  MARK_HIGHLIGHT,\r\n  MARK_ITALIC,\r\n  MARK_STRIKETHROUGH,\r\n  MARK_SUBSCRIPT,\r\n  MARK_SUPERSCRIPT,\r\n  MARK_UNDERLINE,\r\n} from '@udecode/plate'\r\n\r\nexport const autoformatMarks = [\r\n  {\r\n    mode: 'mark',\r\n    type: [MARK_BOLD, MARK_ITALIC],\r\n    match: '***',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: [MARK_UNDERLINE, MARK_ITALIC],\r\n    match: '__*',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: [MARK_UNDERLINE, MARK_BOLD],\r\n    match: '__**',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: [MARK_UNDERLINE, MARK_BOLD, MARK_ITALIC],\r\n    match: '___***',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_BOLD,\r\n    match: '**',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_UNDERLINE,\r\n    match: '__',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_ITALIC,\r\n    match: '*',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_ITALIC,\r\n    match: '_',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_STRIKETHROUGH,\r\n    match: '~~',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_SUPERSCRIPT,\r\n    match: '^',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_SUBSCRIPT,\r\n    match: '~',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_HIGHLIGHT,\r\n    match: '==',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_HIGHLIGHT,\r\n    match: '≡',\r\n  },\r\n  {\r\n    mode: 'mark',\r\n    type: MARK_CODE,\r\n    match: '`',\r\n  },\r\n]\r\n\r\nexport const clearBlockFormat = (editor) => unwrapList(editor)\r\n\r\nexport const format = (editor, customFormatting) => {\r\n  if (editor.selection) {\r\n    const parentEntry = getParent(editor, editor.selection)\r\n    if (!parentEntry) return\r\n    const [node] = parentEntry\r\n    if (\r\n      isElement(node) &&\r\n      !isType(editor, node, ELEMENT_CODE_BLOCK) &&\r\n      !isType(editor, node, ELEMENT_CODE_LINE)\r\n    ) {\r\n      customFormatting()\r\n    }\r\n  }\r\n}\r\n\r\nexport const formatList = (editor, elementType) => {\r\n  format(editor, () =>\r\n    toggleList(editor, {\r\n      type: elementType,\r\n    })\r\n  )\r\n}\r\n\r\nexport const formatText = (editor, text) => {\r\n  format(editor, () => editor.insertText(text))\r\n}\r\n\r\nexport const autoformatLists = [\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_LI,\r\n    match: ['* ', '- '],\r\n    preFormat: clearBlockFormat,\r\n    format: (editor) => formatList(editor, ELEMENT_UL),\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_LI,\r\n    match: ['1. ', '1) '],\r\n    preFormat: clearBlockFormat,\r\n    format: (editor) => formatList(editor, ELEMENT_OL),\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_TODO_LI,\r\n    match: '[] ',\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_TODO_LI,\r\n    match: '[x] ',\r\n    format: (editor) =>\r\n      setNodes(\r\n        editor,\r\n        { type: ELEMENT_TODO_LI, checked: true },\r\n        {\r\n          match: (n) => Editor.isBlock(editor, n),\r\n        }\r\n      ),\r\n  },\r\n]\r\n\r\nexport const autoformatBlocks = [\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_H1,\r\n    match: '# ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_H2,\r\n    match: '## ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_H3,\r\n    match: '### ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_H4,\r\n    match: '#### ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_H5,\r\n    match: '##### ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_H6,\r\n    match: '###### ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_BLOCKQUOTE,\r\n    match: '> ',\r\n    preFormat: clearBlockFormat,\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_HR,\r\n    match: ['---', '—-'],\r\n    preFormat: clearBlockFormat,\r\n    format: (editor) => {\r\n      setNodes(editor, { type: ELEMENT_HR })\r\n      insertNodes(editor, {\r\n        type: ELEMENT_DEFAULT,\r\n        children: [{ text: '' }],\r\n      })\r\n    },\r\n  },\r\n  {\r\n    mode: 'block',\r\n    type: ELEMENT_CODE_BLOCK,\r\n    match: '```',\r\n    triggerAtBlockStart: false,\r\n    preFormat: clearBlockFormat,\r\n    format: (editor) => {\r\n      insertEmptyCodeBlock(editor, {\r\n        defaultType: getPluginType(editor, ELEMENT_DEFAULT),\r\n        insertNodesOptions: { select: true },\r\n      })\r\n    },\r\n  },\r\n]\r\n\r\nexport const autoformatRules = [\r\n  ...autoformatBlocks,\r\n  ...autoformatLists,\r\n  ...autoformatMarks,\r\n  ...autoformatSmartQuotes,\r\n  ...autoformatPunctuation,\r\n  ...autoformatLegal,\r\n  ...autoformatLegalHtml,\r\n  ...autoformatArrow,\r\n  ...autoformatMath,\r\n]\r\n","import {\r\n  ELEMENT_H1,\r\n  ELEMENT_H2,\r\n  ELEMENT_H3,\r\n  ELEMENT_H4,\r\n  ELEMENT_H5,\r\n  ELEMENT_H6,\r\n  ELEMENT_PARAGRAPH,\r\n  ELEMENT_LINK,\r\n  ELEMENT_BLOCKQUOTE,\r\n  MARK_CODE,\r\n  MARK_BOLD,\r\n  MARK_ITALIC,\r\n  MARK_STRIKETHROUGH,\r\n  MARK_HIGHLIGHT,\r\n  MARK_UNDERLINE,\r\n  StyledElement,\r\n  StyledLeaf,\r\n  LinkElement,\r\n  BlockquoteElement,\r\n  withProps,\r\n  withPlaceholders,\r\n} from '@udecode/plate'\r\n\r\nimport { css } from 'styled-components'\r\n\r\nexport const withStyledPlaceHolders = (components) =>\r\n  withPlaceholders(components, [\r\n    {\r\n      key: ELEMENT_PARAGRAPH,\r\n      placeholder: 'Untitled',\r\n      hideOnBlur: false,\r\n    },\r\n    {\r\n      key: ELEMENT_H1,\r\n      placeholder: 'Untitled',\r\n      hideOnBlur: false,\r\n    },\r\n  ])\r\n\r\nexport const components = {\r\n  [ELEMENT_BLOCKQUOTE]: withProps(BlockquoteElement, {\r\n    styles: {\r\n      root: css`\r\n        border-left: 2px solid #7b61ff;\r\n        color: #a1acb3;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_PARAGRAPH]: withProps(StyledElement, {\r\n    as: 'p',\r\n    styles: {\r\n      root: css`m-0 py-1 px-0`,\r\n    },\r\n    prefixClassNames: 'p',\r\n  }),\r\n  [ELEMENT_H1]: withProps(StyledElement, {\r\n    as: 'h1',\r\n    styles: {\r\n      root: css`\r\n        margin: 2em 0 4px;\r\n        font-size: 1.875em;\r\n        font-weight: 500;\r\n        line-height: 1.3;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_H2]: withProps(StyledElement, {\r\n    as: 'h2',\r\n    styles: {\r\n      root: css`\r\n        margin: 1.4em 0 1px;\r\n        font-size: 1.5em;\r\n        font-weight: 500;\r\n        line-height: 1.3;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_H3]: withProps(StyledElement, {\r\n    as: 'h3',\r\n    styles: {\r\n      root: css`\r\n        margin: 1em 0 1px;\r\n        font-size: 1.25em;\r\n        font-weight: 500;\r\n        line-height: 1.3;\r\n        color: #434343;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_H4]: withProps(StyledElement, {\r\n    as: 'h4',\r\n    styles: {\r\n      root: css`\r\n        margin: 0.75em 0 0;\r\n        font-size: 1.1em;\r\n        font-weight: 500;\r\n        line-height: 1.3;\r\n        color: #666666;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_H5]: withProps(StyledElement, {\r\n    as: 'h5',\r\n    styles: {\r\n      root: css`\r\n        margin: 0.75em 0 0;\r\n        font-size: 1.1em;\r\n        font-weight: 500;\r\n        line-height: 1.3;\r\n        color: #666666;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_H6]: withProps(StyledElement, {\r\n    as: 'h6',\r\n    styles: {\r\n      root: css`\r\n        margin: 0.75em 0 0;\r\n        font-size: 1.1em;\r\n        font-weight: 500;\r\n        line-height: 1.3;\r\n        color: #666666;\r\n      `,\r\n    },\r\n  }),\r\n  [ELEMENT_LINK]: LinkElement,\r\n  [MARK_BOLD]: withProps(StyledLeaf, { as: 'strong' }),\r\n  [MARK_CODE]: withProps(StyledLeaf, {\r\n    as: 'code',\r\n    styles: {\r\n      root: [\r\n        css`\r\n          font-size: 85%;\r\n          font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo,\r\n            Courier, monospace;\r\n          background-color: #fff2f9;\r\n          color: #ff647c;\r\n          border-radius: 0.2em;\r\n          padding: 0.2em 0.4em;\r\n          margin: 0.2em;\r\n          line-height: normal;\r\n        `,\r\n      ],\r\n    },\r\n  }),\r\n  [MARK_HIGHLIGHT]: withProps(StyledLeaf, {\r\n    as: 'mark',\r\n    styles: {\r\n      root: css`\r\n        background-color: #ffb800;\r\n        color: #ffffff;\r\n      `,\r\n    },\r\n  }),\r\n  [MARK_ITALIC]: withProps(StyledLeaf, { as: 'em' }),\r\n  [MARK_STRIKETHROUGH]: withProps(StyledLeaf, { as: 's' }),\r\n  [MARK_UNDERLINE]: withProps(StyledLeaf, { as: 'u' }),\r\n}\r\n","import {\r\n  MarkToolbarButton,\r\n  getPluginType,\r\n  MARK_BOLD,\r\n  MARK_ITALIC,\r\n  MARK_UNDERLINE,\r\n  MARK_STRIKETHROUGH,\r\n  MARK_CODE,\r\n  usePlateEditorRef,\r\n  ELEMENT_H1,\r\n  ELEMENT_H2,\r\n  ELEMENT_H3,\r\n  ELEMENT_H4,\r\n  ELEMENT_H5,\r\n  ELEMENT_H6,\r\n  BlockToolbarButton,\r\n  ToolbarButton,\r\n  toggleIndentList,\r\n  indent,\r\n  outdentList,\r\n  MARK_HIGHLIGHT,\r\n  LinkToolbarButton,\r\n} from '@udecode/plate'\r\n\r\nexport const MarksToolbar = () => {\r\n  const editor = usePlateEditorRef()\r\n  return (\r\n    <>\r\n      <MarkToolbarButton\r\n        type={getPluginType(editor, MARK_BOLD)}\r\n        icon={<i className=\"ri-bold\" />}\r\n      />\r\n      <MarkToolbarButton\r\n        type={getPluginType(editor, MARK_ITALIC)}\r\n        icon={<i className=\"ri-italic\" />}\r\n      />\r\n      <MarkToolbarButton\r\n        type={getPluginType(editor, MARK_UNDERLINE)}\r\n        icon={<i className=\"ri-underline\" />}\r\n      />\r\n      <MarkToolbarButton\r\n        type={getPluginType(editor, MARK_STRIKETHROUGH)}\r\n        icon={<i className=\"ri-strikethrough-2\" />}\r\n      />\r\n      <MarkToolbarButton\r\n        type={getPluginType(editor, MARK_HIGHLIGHT)}\r\n        icon={<i className=\"ri-edit-fill\" />}\r\n      />\r\n      <MarkToolbarButton\r\n        type={getPluginType(editor, MARK_CODE)}\r\n        icon={<i className=\"ri-code-view\" />}\r\n      />\r\n      <LinkToolbarButton icon={<i className='ri-link'/>}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const HeadingsToolbar = () => {\r\n  const editor = usePlateEditorRef()\r\n  return (\r\n    <>\r\n      <BlockToolbarButton\r\n        type={getPluginType(editor, ELEMENT_H1)}\r\n        icon={<i className=\"ri-h-1\" />}\r\n      />\r\n      <BlockToolbarButton\r\n        type={getPluginType(editor, ELEMENT_H2)}\r\n        icon={<i className=\"ri-h-2\" />}\r\n      />\r\n      <BlockToolbarButton\r\n        type={getPluginType(editor, ELEMENT_H3)}\r\n        icon={<i className=\"ri-h-3\" />}\r\n      />\r\n      <BlockToolbarButton\r\n        type={getPluginType(editor, ELEMENT_H4)}\r\n        icon={<i className=\"ri-h-4\" />}\r\n      />\r\n      <BlockToolbarButton\r\n        type={getPluginType(editor, ELEMENT_H5)}\r\n        icon={<i className=\"ri-h-5\" />}\r\n      />\r\n      <BlockToolbarButton\r\n        type={getPluginType(editor, ELEMENT_H6)}\r\n        icon={<i className=\"ri-h-6\" />}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport const ListToolbar = () => {\r\n  const editor = usePlateEditorRef()\r\n  return (\r\n    <>\r\n      <ToolbarButton\r\n        onMouseDown={(e) => {\r\n          e.preventDefault()\r\n          toggleIndentList(editor, {\r\n            listStyleType: 'disc',\r\n          })\r\n        }}\r\n        icon={<i className=\"ri-list-unordered\" />}\r\n      />\r\n      <ToolbarButton\r\n        onMouseDown={(e) => {\r\n          e.preventDefault()\r\n          toggleIndentList(editor, {\r\n            listStyleType: 'decimal',\r\n          })\r\n        }}\r\n        icon={<i className=\"ri-list-ordered\" />}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport const IndentToolbar = () => {\r\n  const editor = usePlateEditorRef()\r\n  return (\r\n    <>\r\n      <ToolbarButton\r\n        onMouseDown={(e) => {\r\n          e.preventDefault()\r\n          indent(editor)\r\n        }}\r\n        icon={<i className=\"ri-indent-increase\" />}\r\n      />\r\n      <ToolbarButton\r\n        onMouseDown={(e) => {\r\n          e.preventDefault()\r\n          outdentList(editor)\r\n        }}\r\n        icon={<i className=\"ri-indent-decrease\" />}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { Color, getClassName, Spacing } from '@ds.crisp/foundation'\r\nimport React from 'react'\r\n\r\nconst EditorHeader = ({\r\n  goBack = () => {},\r\n  onSave = () => {},\r\n  readOnly = false,\r\n  onUnlock = () => {},\r\n  onUndo = () => {},\r\n  onRedo = () => {},\r\n}) => {\r\n  return (\r\n    <div\r\n      className={`d-flex justify-content-between align-items-center ${readOnly && 'pna-editor-toolbar'} ${getClassName({\r\n        paddingY: Spacing.xxs,\r\n        backgroundColor: Color.white,\r\n      })}`}\r\n    >\r\n      <span className=\"slate-HeaderButton active\" onClick={goBack}>\r\n        <i className=\"ri-arrow-left-s-line\" />\r\n      </span>\r\n      <span>\r\n        {!readOnly ? (\r\n          <>\r\n            <span className=\"slate-HeaderButton\" onClick={onUndo}>\r\n              <i className=\"ri-arrow-go-back-line\" />\r\n            </span>\r\n            <span className=\"slate-HeaderButton\" onClick={onRedo}>\r\n              <i className=\"ri-arrow-go-forward-line\" />\r\n            </span>\r\n            <span className=\"slate-HeaderButton\" onClick={onSave}>\r\n              <i className=\"ri-save-line\" />\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <span className=\"slate-HeaderButton\" onClick={onUnlock}>\r\n            <i className=\"ri-lock-2-line\" />\r\n          </span>\r\n        )}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditorHeader\r\n"],"names":["$d8b6fe099567d3e9$export$2e2bcd8739ae039","value","onChange","readOnly","goBack","onSave","onUnlock","id","content","setContent","$fd2wl","useState","StaticToolbar","editor","$25DGs","usePlateEditorRef","$k8UWl","jsxs","$9qkK4","Card","padding","$1j7Qj","Spacing","none","className","$l9TBI","MarksToolbar","BlockToolbarButton","type","getPluginType","ELEMENT_BLOCKQUOTE","icon","jsx","IndentToolbar","undo","redo","Fragment","$b7TrX","default","onUndo","onRedo","Plate","initialValue","plugins","createPlugins","$33Vro","components","$2Me3D","withStyledPlaceHolders","editableProps","autoFocus","c","JSON","stringify","$23ae35738fb237ea$var$resetBlockTypesCommonRule","types","ELEMENT_TODO_LI","defaultType","ELEMENT_PARAGRAPH","$23ae35738fb237ea$export$8b3ca321c77fdea6","createResetNodePlugin","options","rules","hotkey","predicate","isBlockAboveEmpty","isSelectionAtBlockStart","createExitBreakPlugin","before","query","start","end","allow","ELEMENT_LI","createTrailingBlockPlugin","createSoftBreakPlugin","ELEMENT_CODE_BLOCK","ELEMENT_TD","createLinkPlugin","createParagraphPlugin","createIndentPlugin","inject","props","validTypes","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_H4","ELEMENT_H5","ELEMENT_H6","createIndentListPlugin","createBoldPlugin","createItalicPlugin","createUnderlinePlugin","createStrikethroughPlugin","createCodePlugin","createBlockquotePlugin","createHighlightPlugin","$3cc27df90f375945$export$acb8402a930d3f13","mode","MARK_BOLD","MARK_ITALIC","match","MARK_UNDERLINE","MARK_STRIKETHROUGH","MARK_SUPERSCRIPT","MARK_SUBSCRIPT","MARK_HIGHLIGHT","MARK_CODE","$3cc27df90f375945$export$3b4b7cd155ec1807","unwrapList","$3cc27df90f375945$export$d9468344d3651243","customFormatting","selection","parentEntry","getParent","node","isElement","isType","ELEMENT_CODE_LINE","$3cc27df90f375945$export$e8b8be48b45905bb","elementType","toggleList","$3cc27df90f375945$export$347be5945fbf1042","preFormat","format","ELEMENT_UL","ELEMENT_OL","setNodes","checked","n","$7v0qA","Editor","isBlock","ELEMENT_HR","autoformatSmartQuotes","autoformatPunctuation","autoformatLegal","autoformatLegalHtml","autoformatArrow","autoformatMath","$205af807661a2ec3$export$e68e33fec0189f49","withPlaceholders","key","placeholder","hideOnBlur","$205af807661a2ec3$export$9b5ac10f59f76296","withProps","BlockquoteElement","styles","root","$eJaxH","css","StyledElement","as","prefixClassNames","$f67592ade8e7b681$export$42ae2c527b1fba21","MarkToolbarButton","LinkToolbarButton","$f67592ade8e7b681$export$46d7da137c9a080e","ToolbarButton","onMouseDown","e","preventDefault","indent","outdentList","$819b5c57738bed14$export$2e2bcd8739ae039","getClassName","paddingY","xxs","backgroundColor","Color","white","onClick"],"version":3,"file":"PlateEditor.24ea9cc5.js.map"}