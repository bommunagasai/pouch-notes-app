{"mappings":"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","sources":["src/components/CreateNoteForm.js","src/components/Textarea.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Text,\r\n  Card,\r\n  Button,\r\n  SheetHeader,\r\n  SheetFooter,\r\n  Color,\r\n  Icon,\r\n} from '@ds.crisp/react-components'\r\nimport {\r\n  Color as ColorMap,\r\n  FontWeight,\r\n  FontSize,\r\n  getClassName,\r\n  Spacing,\r\n  Size,\r\n} from '@ds.crisp/foundation'\r\n\r\nimport Input from '../components/Input'\r\nimport Textarea from '../components/Textarea'\r\nimport { TEXT_HYPHEN_UNDERSCORE_SPACE } from '../constants/regex'\r\n\r\nconst COLOR_THEMES = ['blue', 'red', 'green', 'yellow']\r\nconst ICON_TYPES = ['bulb', 'book', 'bookmark', 'gift']\r\n\r\nconst CreateNoteForm = ({\r\n  title,\r\n  hint,\r\n  formData: formDataProp,\r\n  onCancel,\r\n  onSubmit,\r\n}) => {\r\n  const [formData, setFormData] = useState(formDataProp)\r\n  const [err, setErr] = useState(null)\r\n\r\n  const onChange = (formValue) => {\r\n    setErr(null)\r\n    setFormData({ ...formData, ...formValue })\r\n  }\r\n\r\n  const validateFormData = (formData) => {\r\n    const { metaTitle, metaDescription } = formData || {}\r\n    let err = {}\r\n    if (!metaTitle) {\r\n      err.metaTitle = 'This field can not be empty'\r\n    } else if (!TEXT_HYPHEN_UNDERSCORE_SPACE.test(metaTitle.trim())) {\r\n      err.metaTitle = 'Only - and _ are allowed'\r\n    } else if (metaTitle.trim().length > 32) {\r\n      err.metaTitle = 'Max length 42'\r\n    } else if (metaTitle.trim().length < 4) {\r\n      err.metaTitle = 'Min length 4 after trim'\r\n    }\r\n\r\n    if (metaDescription && metaDescription.trim().length) {\r\n      if (!TEXT_HYPHEN_UNDERSCORE_SPACE.test(metaDescription.trim())) {\r\n        err.metaDescription = 'Only - and _ are allowed'\r\n      } else if (metaDescription.trim().length > 60) {\r\n        err.metaDescription = 'Max length 60'\r\n      } else if (metaDescription.trim().length < 4) {\r\n        err.metaDescription = 'Min length 4 after trim'\r\n      }\r\n    }\r\n\r\n    return err.metaTitle || err.metaDescription ? err : false\r\n  }\r\n\r\n  const onSave = () => {\r\n    const err = validateFormData(formData)\r\n    if (!err) {\r\n      onSubmit(formData)\r\n    } else {\r\n      setErr(err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col md={8} />\r\n        <Col md={4} className={getClassName({ marginB: Spacing.sm })}>\r\n          <Card\r\n            padding={Spacing.none}\r\n            borderRadius={Spacing.sm}\r\n            className=\"pna-create-note-form-container\"\r\n          >\r\n            <SheetHeader\r\n              className={`pna-sheet-header-border ${getClassName({\r\n                padding: Spacing.sm,\r\n                backgroundColor: ColorMap.white,\r\n                borderRadiusT: Spacing.sm,\r\n              })}`}\r\n            >\r\n              <Text fontWeight={FontWeight.bold}>{title}</Text>\r\n            </SheetHeader>\r\n            <div className={getClassName({ padding: Spacing.sm })}>\r\n              <Text\r\n                fontSize={FontSize.sm}\r\n                fontWeight={FontWeight.light}\r\n                className={getClassName({\r\n                  paddingB: Spacing.xxxs,\r\n                  mardingX: Spacing.sm,\r\n                })}\r\n              >\r\n                Title\r\n              </Text>\r\n              <Input\r\n                placeholder=\"Enter Title\"\r\n                onChange={(e) => {\r\n                  onChange({ metaTitle: e.target.value })\r\n                }}\r\n                defaultValue={formData?.metaTitle}\r\n              />\r\n              {err?.metaTitle && (\r\n                <Text fontColor={ColorMap.red} fontSize={FontSize.xs}>\r\n                  {err?.metaTitle}\r\n                </Text>\r\n              )}\r\n              <Text\r\n                fontSize={FontSize.sm}\r\n                fontWeight={FontWeight.light}\r\n                className={getClassName({\r\n                  marginB: Spacing.xxxs,\r\n                  marginT: Spacing.xs,\r\n                })}\r\n              >\r\n                Description\r\n              </Text>\r\n              <Textarea\r\n                placeholder=\"Enter Description\"\r\n                onChange={(e) => {\r\n                  onChange({ metaDescription: e.target.value })\r\n                }}\r\n                defaultValue={formData?.metaDescription}\r\n              />\r\n              {err?.metaDescription && (\r\n                <Text fontColor={ColorMap.red} fontSize={FontSize.xs}>\r\n                  {err?.metaDescription}\r\n                </Text>\r\n              )}\r\n              <Row>\r\n                <Col>\r\n                  <Text\r\n                    fontSize={FontSize.sm}\r\n                    fontWeight={FontWeight.light}\r\n                    className={getClassName({\r\n                      marginB: Spacing.xxxs,\r\n                      marginT: Spacing.xs,\r\n                    })}\r\n                  >\r\n                    Theme\r\n                  </Text>\r\n                  {COLOR_THEMES.map((c) => (\r\n                    <Card\r\n                      className=\"pna-font-size-zero d-inline-block\"\r\n                      backgroundColor={\r\n                        ColorMap[formData?.theme === c ? 'light-blue' : 'white']\r\n                      }\r\n                      borderRadius={Spacing.xxs}\r\n                      padding={Spacing.xxs}\r\n                      onClick={() => onChange({ theme: c })}\r\n                    >\r\n                      <Color\r\n                        color={ColorMap[c]}\r\n                        className={getClassName({ borderRadius: Spacing.xxxs })}\r\n                      />\r\n                    </Card>\r\n                  ))}\r\n                </Col>\r\n                <Col>\r\n                  <Text\r\n                    fontSize={FontSize.sm}\r\n                    fontWeight={FontWeight.light}\r\n                    className={getClassName({\r\n                      marginB: Spacing.xxxs,\r\n                      marginT: Spacing.xs,\r\n                    })}\r\n                  >\r\n                    Type\r\n                  </Text>\r\n                  {ICON_TYPES.map((i) => (\r\n                    <Card\r\n                      className=\"pna-font-size-zero d-inline-block mb-2\"\r\n                      backgroundColor={\r\n                        ColorMap[formData?.type === i ? 'light-blue' : 'white']\r\n                      }\r\n                      borderRadius={Spacing.xxs}\r\n                      padding={Spacing.xxs}\r\n                      onClick={() => onChange({ type: i })}\r\n                    >\r\n                      <Icon\r\n                        name={i}\r\n                        color={ColorMap[formData?.type === i ? 'blue' : 'dark']}\r\n                        size={FontSize.base}\r\n                      />\r\n                    </Card>\r\n                  ))}\r\n                </Col>\r\n              </Row>\r\n\r\n              {hint && (\r\n                <Card\r\n                  backgroundColor={ColorMap['light-yellow']}\r\n                  borderRadius={Spacing.xxs}\r\n                  className={`pna-font-size-zero d-flex`}\r\n                >\r\n                  <Icon\r\n                    name=\"info-outline\"\r\n                    color={ColorMap.dark}\r\n                    size={FontSize.base}\r\n                  />\r\n                  <Text\r\n                    className=\"d-inline-block\"\r\n                    fontSize={FontSize.xs}\r\n                    fontColor={ColorMap.dark}\r\n                    fontWeight={FontWeight.light}\r\n                    className={getClassName({ marginL: Spacing.xxs })}\r\n                  >\r\n                    {hint}\r\n                  </Text>\r\n                </Card>\r\n              )}\r\n            </div>\r\n            <SheetFooter\r\n              className={`pna-text-end pna-sheet-footer-border ${getClassName({\r\n                padding: Spacing.sm,\r\n                backgroundColor: ColorMap.white,\r\n              })}`}\r\n            >\r\n              <Button\r\n                size={Size.sm}\r\n                backgroundColor={ColorMap['light-blue']}\r\n                fontColor={ColorMap.dark}\r\n                className={'pna-create-submit-btn mr-3'}\r\n                onClick={onCancel}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size={Size.sm}\r\n                backgroundColor={ColorMap.dark}\r\n                className={'pna-create-submit-btn'}\r\n                onClick={onSave}\r\n              >\r\n                Save\r\n              </Button>\r\n            </SheetFooter>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default CreateNoteForm\r\n","import React from 'react'\r\n\r\nconst Textarea = ({\r\n  onChange,\r\n  placeholder,\r\n  ...rest\r\n}) => {\r\n  return <textarea className='pna-input-field' onChange={onChange} placeholder={placeholder} {...rest}/>\r\n}\r\n\r\nexport default Textarea"],"names":["$c88ff38a5645c072$var$COLOR_THEMES","$c88ff38a5645c072$var$ICON_TYPES","$c88ff38a5645c072$export$2e2bcd8739ae039","title","hint","formData","formDataProp","onCancel","onSubmit","formData1","setFormData","$fd2wl","useState","err1","setErr","onChange","formValue","$k8UWl","jsx","$9qkK4","Container","Row","Col","md","className","$1j7Qj","getClassName","marginB","Spacing","sm","Card","padding","none","borderRadius","SheetHeader","backgroundColor","Color","white","borderRadiusT","Text","fontWeight","FontWeight","bold","fontSize","FontSize","light","paddingB","xxxs","mardingX","$a7KEc","default","placeholder","e","metaTitle","target","value","defaultValue","fontColor","red","xs","marginT","$8u1Hi","metaDescription","map","c","theme","xxs","onClick","color","i","type","Icon","name","size","base","jsxs","dark","marginL","SheetFooter","Button","Size","err","$eaKG3","TEXT_HYPHEN_UNDERSCORE_SPACE","test","trim","length","validateFormData","$62d2711edec0131f$export$2e2bcd8739ae039","rest"],"version":3,"file":"Create.ce1a055f.js.map"}